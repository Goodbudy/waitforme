This package is for understanding how to run and use turtlebot cause i'll forget
cause i'm a dumbass. -assumes all ros/turtlebot/gazebo are correctly installed

This is heavily using the commands in the following links
https://ros2-industrial-workshop.readthedocs.io/en/latest/_source/navigation/ROS2-Turtlebot.html
https://emanual.robotis.com/docs/en/platform/turtlebot3/simulation/


[To setup turtlebot]--
for when you must colcon build or have new code. 
start by navigating to ros2_ws and colcon building + sourcing:
cd ~/ros2_ws
colcon build
source install/setup.bash

-note: issue may arise if packages in waitforme aren't working. can ignore.
refer to Guide_toGit to ignore packages

[Exporting model]--
exporting is used in several stages so good to know how to do it:
export TURTLEBOT3_MODEL=<desired_model>
eg: export TURTLEBOT3_MODEL=burger

-types of models include
burger
waffle
waffle_pi
-can also check what models are available with following line from base cd
ls ~/ros2_ws/src/turtlebot3/turtlebot3_description/urdf
note: assumes packages are setup in similar position to mine

[Launch gazebo with simulation]--
this requires exporting the desired model and then launching the world - see [Exporting model]
after exporting lauch desired world
ros2 launch turtlebot3_gazebo <world_name>.launch.py
eg: ros2 launch turtlebot3_gazebo empty_world.launch.py

available worlds include:
empty_world.world            turtlebot3_dqn_stage4.world
turtlebot3_dqn_stage1.world  turtlebot3_house.world
turtlebot3_dqn_stage2.world  turtlebot3_world.world
turtlebot3_dqn_stage3.world

note: dqn are for machine learning

-can also check what worlds are available with following line from base cd
ls ~/ros2_ws/src/turtlebot3_simulations/turtlebot3_gazebo/worlds/
note: assumes packages are setup in similar position to mine

[Teleop/control Turtlebot]--
to control Turtlebot with a keyboard you can use a teleop command in a seperate terminal
this requires a world file to be running in gazebo - see [Launch gazebo with simulation]
the commands to run telop also require for the turtlebot to be exported in the new terminal.
once exported run the following command:
ros2 run turtlebot3_teleop teleop_keyboard

[Visualising w/ Rviz]--
to see laser scan data can use rviz:
ros2 launch turtlebot3_bringup rviz2.launch.py

to see with a camera view we need to subscribe to camera node
in rviz go to add - by topic and look for the camera topic
to check topics use:
ros2 topic list
looks for:
/camera/image_raw
/gazebo/camera/image_raw

-note: other topics and data points can be visualised with rviz.
just need to subscribe to the correct topic

[SLAM and yaml Files]--
To make the robot actually be able to move in its environment with nav stuff
it is required to create a .yaml file for it to use.
to do so first run world in gazebo + run teleop.
Then in new terminal export and run following command:
ros2 launch turtlebot3_cartographer cartographer.launch.py use_sim_time:=True

This will open rviz. then teleop until entire map is explored.
after map is explored in new terminal use following commands to save map:
cd <desired_directory>
ros2 run nav2_map_server map_saver_cli -f <map_name>
eg: ros2 run nav2_map_server map_saver_cli -f turtle_map
-note: this will save the map in whatever directory you are currently in.

alternatively can use the slightly different command:
ros2 run nav2_map_server map_saver_cli -f ~/<desired_directory>/<map_name>
eg: ros2 run nav2_map_server map_saver_cli -f ~/ros2_ws/src/turtle_map
-note: this will save it as turtlemap in the src

[Navigation with Ros2]--
it is possible to navigate around a map using the Ros2 navigation topics.
once the gazebo is running open and export in a new terminal before running the following line:
ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:=True
-note: this will run the default turtlebot world. 

for custom worlds there are two main methods of running the correct navigation file:
Method 1 - run with directory and map name.
ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:=True map:=$HOME/<desired_directory>/<map_name.yaml>
eg: ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:=True map:=$HOME/ros2_ws/src/waitforme/Tom/turtle_map.yaml

Method 2 - run from desired directory
cd <desired_directory>
ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:=True map:=./<map_name.yaml>
eg: ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:=True map:=./turtle_map.yaml

in either case once the rvix has loaded using the above commands then you can use the two buttons
2d pose estimate - used to localise initially
navigation2 goal - helps localise and provides a goal for the robot, which it will move towards.